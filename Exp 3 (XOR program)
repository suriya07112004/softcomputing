import numpy as np

# Sigmoid activation and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# XOR input and target data
input_data = np.array([[0, 0],
                       [0, 1],
                       [1, 0],
                       [1, 1]])
target_data = np.array([[0],
                        [1],
                        [1],
                        [0]])

# Neural network architecture
input_size = 2
hidden_size = 4   # increased hidden neurons for better learning
output_size = 1
learning_rate = 0.1
epochs = 20000    # increased training iterations

# Initialize weights and biases
hidden_weights = np.random.uniform(size=(input_size, hidden_size))
hidden_bias = np.random.uniform(size=(1, hidden_size))
output_weights = np.random.uniform(size=(hidden_size, output_size))
output_bias = np.random.uniform(size=(1, output_size))

# Training
for _ in range(epochs):
    # Forward pass
    hidden_layer_activation = np.dot(input_data, hidden_weights) + hidden_bias
    hidden_layer_output = sigmoid(hidden_layer_activation)

    output_layer_activation = np.dot(hidden_layer_output, output_weights) + output_bias
    predicted_output = sigmoid(output_layer_activation)

    # Backpropagation
    error = target_data - predicted_output
    d_predicted_output = error * sigmoid_derivative(predicted_output)

    error_hidden_layer = d_predicted_output.dot(output_weights.T)
    d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)

    # Update weights and biases
    output_weights += hidden_layer_output.T.dot(d_predicted_output) * learning_rate
    output_bias += np.sum(d_predicted_output, axis=0, keepdims=True) * learning_rate
    hidden_weights += input_data.T.dot(d_hidden_layer) * learning_rate
    hidden_bias += np.sum(d_hidden_layer, axis=0, keepdims=True) * learning_rate

# Testing the trained network
print("\n--- XOR Prediction Results ---")
for data in input_data:
    hidden_layer = sigmoid(np.dot(data, hidden_weights) + hidden_bias)
    output_layer = sigmoid(np.dot(hidden_layer, output_weights) + output_bias)
    print(f"Input: {data} â†’ Predicted Output: {output_layer[0][0]:.4f}")
